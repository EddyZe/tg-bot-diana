package ru.eddyz.tgbotdiana.commands;


import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.interfaces.BotApiObject;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;
import ru.eddyz.tgbotdiana.domain.CurrentListGroup;
import ru.eddyz.tgbotdiana.exception.UserException;
import ru.eddyz.tgbotdiana.services.UserService;
import ru.eddyz.tgbotdiana.util.InlineKeyUtil;
import ru.eddyz.tgbotdiana.util.ReplayKeyUtil;

@Slf4j
@Component
@RequiredArgsConstructor
public class StartCommand implements Command {

    private final TelegramClient telegramClient;
    private final UserService userService;

    private final CurrentListGroup currentListGroup;


    @Override
    public <T extends BotApiObject> void execute(T apiObject) {
        if (apiObject instanceof Message message) {
            executeFromMessage(message);
        }
    }

    private void executeFromMessage(Message message) {
        Long chatId = message.getChatId();
        String username = message.getFrom().getUserName();
        username = username == null ? "Username –Ω–µ —É–∫–∞–∑–∞–Ω" : username;

        responseOnMessage(chatId, username);
    }

    private void responseOnMessage(Long chatId, String username) {
        try {
            userService.createUser(chatId, username);
            sendMessage(chatId, generateMessage(), InlineKeyUtil.selectGroupSubscribeKey(currentListGroup.loadGroups()));
            sendMessage(chatId, generateMessageMainMenu(), ReplayKeyUtil.mainMenu());
        } catch (UserException e) {
            log.warn(e.getMessage());
            sendMessage(chatId, generateMessage(), InlineKeyUtil.selectGroupSubscribeKey(currentListGroup.loadGroups()));
            sendMessage(chatId, generateMessageMainMenu(), ReplayKeyUtil.mainMenu());
        }
    }

    private String generateMessageMainMenu() {
        return "–¢–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é —Å–Ω–∏–∑—É üëá";
    }

    private String generateMessage() {
        return """
                <b>–¢–û–ü–ö–∞—Å—Ç</b> ‚Äî —Ç–≤–æ–π –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Å—Ç–∏–Ω–≥–∞–º –¥–ª—è —Å—ä—ë–º–æ–∫! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∏ —Ç—ã –ø–µ—Ä–≤—ã–º –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö: –æ—Ç —Ä–µ–∫–ª–∞–º—ã –¥–æ –∫–∏–Ω–æ. –ù–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ ‚Äî —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞—Å—Ç–∏–Ω–≥–∏, —á–µ—Ç–∫–∏–µ —É—Å–ª–æ–≤–∏—è –∏ —à–∞–Ω—Å –ø—Ä–æ—è–≤–∏—Ç—å —Å–µ–±—è. –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø–∞—Å—Ç—å –≤ –º–∏—Ä –∫–∏–Ω–æ –∏ –º–µ–¥–∏–∞!
                
                ‚ú® <b>–ü–æ—á–µ–º—É –º—ã?</b>
                ‚Ä¢ <i>–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–∞—Å—Ç–∏–Ω–≥–∏</i>
                ‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è</i>
                ‚Ä¢ <i>–£–¥–æ–±–Ω–æ, –±—ã—Å—Ç—Ä–æ, –±–µ–∑ —Å–ø–∞–º–∞</i>
                
                –ü–æ–¥–ø–∏—à–∏—Å—å —Å–µ–π—á–∞—Å ‚Äî —Ç–≤–æ—è —Ä–æ–ª—å —É–∂–µ –∂–¥–µ—Ç!
                """;
    }

    private void sendMessage(Long chatId, String message, ReplyKeyboard keyboard) {
        try {
            telegramClient.execute(SendMessage.builder()
                    .text(message)
                    .chatId(chatId)
                    .parseMode(ParseMode.HTML)
                    .replyMarkup(keyboard)
                    .build());
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ Start: {}", e.getMessage());
        }
    }
}
